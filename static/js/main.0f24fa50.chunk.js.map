{"version":3,"sources":["components/Navbar.js","components/Text.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","toggleMode","onClick","Text","useState","text","setText","rows","onChange","event","target","value","style","color","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","textTransform","replaceAll","copyText","select","navigator","clipboard","writeText","split","join","length","defaultProps","Alert","alert","role","word","lower","charAt","slice","capital","msg","App","setalert","message","setTimeout","setMode","body","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0f24fa50.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n      <div>\r\n        <nav\r\n          className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n        >\r\n          <a className={`navbar-brand`} href=\"#\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"/navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav mr-auto\">\r\n              <li className=\"nav-item active\">\r\n                <a className=\"nav-link\" href=\"#\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n              \r\n            </ul>\r\n            {/* <button\r\n              className={`btn btn-${props.redMode ===\"danger\"?\"light\" : \"danger\"} my-2 my-sm-0`}\r\n              type=\"\"\r\n              onClick={props.redMode}\r\n            >\r\n              Red mode\r\n            </button>\r\n            <button\r\n              className={`btn btn-${props.goldenMode===\"warning\"?\"light\":\"warning\"} my-2 mx-2 my-sm-0`}\r\n              type=\"\"\r\n              onClick={props.goldenMode}\r\n            >\r\n              {\" \"}\r\n              Golden mode\r\n            </button> */}\r\n            <button\r\n              className={`btn btn-${\r\n                props.toggleMode === \"dark\" ? \"light\" : \"dark\"\r\n              } text-capitalize\r\n                 my-2 mx-2 my-sm-0`}\r\n              type=\"\"\r\n              onClick={props.toggleMode}\r\n            >\r\n              {props.mode} mode\r\n            </button>\r\n          </div>\r\n        </nav>\r\n        \r\n      </div>\r\n    );\r\n}\r\n \r\nNavbar.propTypes = {title: PropTypes.string.isRequired};\r\nNavbar.defaultProps = {\r\n  title: \"Title\"\r\n};\r\n","import React, {useState} from 'react'\r\n\r\nexport default function Text(props) {\r\n  const [text, setText] = useState('');\r\n  \r\n  const handleUp = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Uppercase\", \"success\");\r\n  }\r\n  const handleLo = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Lowercase\", \"success\");\r\n  };\r\n  const handleSp = () => {\r\n    let newText = text.replaceAll(\" \", \"\");\r\n    setText(newText);\r\n    props.showAlert(\"All spaces are removed\", \"success\");\r\n  };\r\n  const handleDe = () => {\r\n    setText('');\r\n        props.showAlert(\"All text cleared\", \"success\");\r\n  };\r\n  const handleCopy = () => {\r\n    let copyText = document.getElementById('myText');\r\n    if (copyText.value !== \"\") {\r\n      copyText.select();\r\n      navigator.clipboard.writeText(copyText.value);\r\n      props.showAlert(\"Text Copied Successfully\", \"success\");\r\n    }else{\r\n      props.showAlert(\"Please enter some text to copy\", \"warning\");\r\n    }\r\n  };\r\n  const handleRmspace = () => {\r\n    let newText = text.split(/[' ']+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra spaces removed\", \"success\");\r\n  };\r\n  \r\n  const handleOnchange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  // const [myStyle, setmyStyle] = useState({\r\n  //   color: \"black\",\r\n  //   backgroundColor: \"white\",\r\n  //   fontWeight: \"normal\",\r\n  // });\r\n  // const handlebold = ()=>{\r\n  //   if(myStyle.fontWeight === 'normal'){\r\n  //     setmyStyle({\r\n  //       fontWeight: 'bold'\r\n  //     })\r\n  //   }else{\r\n  //     setmyStyle({\r\n  //       fontWeight: \"normal\",\r\n  //     });\r\n  //   }\r\n  // }\r\n  const handleCap = ()=>{\r\n       let copyText = document.getElementById('myText');\r\n        copyText.style.textTransform = 'capitalize'; \r\n  }\r\n     \r\n  \r\n  // const handleNewtab = () => {\r\n  //   let copyText = document.getElementById(\"myText\");\r\n  //   let i;\r\n  //   for(i=0; i= copyText.length; i++){\r\n  //     window.open(copyText);\r\n  //   }\r\n  // };\r\n  //   const [btnText, setbtnText] = useState(\"Dark mode\");\r\n  //   const handledark = () => {\r\n  //     if(myStyle.color === \"black\"){\r\n  //       setmyStyle({\r\n  //         color: \"white\",\r\n  //         backgroundColor: \"rgb(6, 14, 61)\"\r\n  //       });\r\n  //       setbtnText(\"Light mode\");\r\n  //     }else{\r\n  //       setmyStyle({\r\n  //         color: \"black\",\r\n  //         backgroundColor: \"white\"\r\n  //       });\r\n  //             setbtnText(\"Dark mode\");\r\n  //   }\r\n  // }\r\n    return (\r\n      <div\r\n        className=\"container my-3\"\r\n        // style={props.mode}\r\n      >\r\n        <div className=\"form-group\">\r\n          <h2>Enter your text here </h2>\r\n          <textarea\r\n            className={`form-control bg-${props.mode}`}\r\n            id=\"myText\"\r\n            rows=\"8\"\r\n            onChange={handleOnchange}\r\n            value={text}\r\n            style={{ color: props.mode === \"light\" ? \"grey\" : \"white\" }}\r\n          ></textarea>\r\n          <div className=\"my-3\">\r\n            <button className=\"btn btn-primary my-2 mx-1\" onClick={handleUp}>\r\n              Uppercase\r\n            </button>\r\n            <button className=\"btn btn-primary my-2 mx-1\" onClick={handleLo}>\r\n              Lowercase\r\n            </button>\r\n            <button className=\"btn btn-primary my-2 mx-1\" onClick={handleCap}>\r\n              Capitalize\r\n            </button>\r\n\r\n            <button className=\"btn btn-primary my-2 mx-1\" onClick={handleSp}>\r\n              Remove all Space\r\n            </button>\r\n            \r\n            <button className=\"btn btn-primary my-2 mx-1\" onClick={handleCopy}>\r\n              Copy Text\r\n            </button>\r\n            <button\r\n              className=\"btn btn-primary my-2 mx-1\"\r\n              onClick={handleRmspace}\r\n            >\r\n              Remove Extraspaces\r\n            </button>\r\n            <button className=\"btn btn-primary my-2 mx-1\" onClick={handleDe}>\r\n              Clear Text\r\n            </button>\r\n            {/* <button className=\"btn btn-primary mx-1\" onClick={handleNewtab}>\r\n              Open in new tab\r\n            </button> */}\r\n            {/* <button className=\"btn btn-primary mx-1\" onClick={handledark}>\r\n              {btnText}\r\n            </button> */}\r\n          </div>\r\n        </div>\r\n        <div className=\"my-3\">\r\n          <h2>Text summary</h2>\r\n          <p>\r\n            \r\n            {text.split(\" \").length}words and {text.length} characters\r\n          </p>\r\n          <p>{0.008 * text.split(\" \").length} minutes to read</p>\r\n          <h3 className=\"my-2\">Preview</h3>\r\n          <p>{text === \"\" ? \"Enter something to preview\" : text}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capital = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n      props.alert && (\r\n        <div>\r\n          <div\r\n            className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n            role=\"alert\" >\r\n            <strong>{capital(props.alert.type)}</strong> {props.alert.msg}\r\n          </div>\r\n        </div>\r\n      )\r\n    );\r\n}\r\n\r\nexport default Alert\r\n","import \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport Text from \"./components/Text\";\nimport Alert from \"./components/Alert\";\nimport React, { useState } from \"react\";\n\n// import Section from \"./components/Section\";\n  // \"homepage\": \"https://ashishrana0.github.io/my-app\",\n\n// \"predeploy\": \"npm run build\",\n    // \"deploy\": \"gh-pages -d build\",\nfunction App() {\n  const [alert, setalert] = useState(null);\n  const showAlert = (message, type)=>{\n    setalert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() =>{\n      setalert(null);\n    }, 1500);\n  }\n  const [mode, setMode] = useState(\"light\");\n  // const goldenMode =()=>{\n  //   if (mode === \"light\") {\n  //     setMode(\"warning\");\n  //     document.body.style.backgroundColor = \"rgb(146 117 24)\";\n  //     document.body.style.color = \"#fff\";\n  //     showAlert(\"Dark mode enabled\", \"success\");\n  //   } else {\n  //     setMode(\"light\");\n  //     document.body.style.backgroundColor = \"white\";\n  //     document.body.style.color = \"#ffc107\";\n  //     showAlert(\"Light mode enabled\", \"success\");\n  //   }\n  // }\n  // const redMode = () => {\n  //   if (mode === \"light\") {\n  //     setMode(\"danger\");\n  //     document.body.style.backgroundColor = \"#580e15\";\n  //     document.body.style.color = \"#fff\";\n  //     showAlert(\"Dark mode enabled\", \"success\");\n  //   } else {\n  //     setMode(\"light\");\n  //     document.body.style.backgroundColor = \"white\";\n  //     document.body.style.color = \"#dc3545\";\n  //     showAlert(\"Light mode enabled\", \"success\");\n  //   }\n  // };\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"rgb(3 35 64)\";\n      document.body.style.color = \"#fff\";\n      showAlert(\"Dark mode enabled\", \"success\");\n    } \n    else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      document.body.style.color = \"rgb(3 35 64)\";\n      showAlert(\"Light mode enabled\", \"success\");\n    }\n  };\n  return (\n    <>\n      <Navbar\n        title={\"Text utilities\"}\n        mode={mode}\n        toggleMode={toggleMode}\n        // goldenMode={goldenMode}\n        // redMode={redMode}\n      />\n      <Alert alert={alert} />\n      <Text mode={mode} showAlert={showAlert} />\n\n      {/* <Section /> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}